# -*- coding: utf-8 -*-
"""Untitled8.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1p-sIKkVHjOjcf2C6i7PgyuBq-rCROfbq
"""

# Пользователь вводит время в секундах. Переведите время в часы, минуты и секунды и выведите в формате чч:мм:сс. Используйте форматирование строк.
 import math
 time = int(input('введите время в секундах: '))
 hours = math.floor(time/3600)
 min = math.floor((time - hours*3600)/60)
 sec = time - hours * 3600 - min * 60
 print (hours,':',min,':',sec)



# Узнайте у пользователя число n. Найдите сумму чисел n + nn + nnn. Например, пользователь ввёл число 3. Считаем 3 + 33 + 333 = 369.
num = int(input('Напиши свое число: '))
num1 = str(num)*2
num2 = str(num)*3
second = int(num1)
third = int(num2)
sum = num + second + third
sum



# Спортсмен занимается ежедневными пробежками. В первый день его результат составил a километров.
# Каждый день спортсмен увеличивал результат на 10 % относительно предыдущего.
# Требуется определить номер дня, на который общий результат спортсмена составить не менее b километров. 
# Программа должна принимать значения параметров a и b и выводить одно натуральное число — номер дня.

print("Введите первый день")
x = int(input())
print("Введите второй день")
y = int(input())
s = x
k = 1
while s <= y:
    k = k+1
    s = 1.1*s
print("k = ", k, end = '')



# Пользователь вводит целое положительное число. Найдите самую большую цифру в числе. Для решения используйте цикл while и арифметические операции.
# Запросите у пользователя значения выручки и издержек фирмы. 
# Определите, с каким финансовым результатом работает фирма (прибыль — выручка больше издержек, или убыток — издержки больше выручки).
# Выведите соответствующее сообщение. Если фирма отработала с прибылью, вычислите рентабельность выручки (соотношение прибыли к выручке). 
# Далее запросите численность сотрудников фирмы и определите прибыль фирмы в расчете на одного сотрудника.

print("Введите значение выручки")
x = int(input())
print("Введите значение издержек")
y = int(input())
if x>y: 
  print('прибыль')
  z = (x-y)/x
  print('рентабельность выручки равна ',z)
  print("Введите количество сотрудников")
  m = int(input()) 
  i = (x-y)/m 
  print('Прибыль на одного сотрудника', i)
if x<y:
   print('убыток')



# Создать список и заполнить его элементами различных типов данных. 
# Реализовать скрипт проверки типа данных каждого элемента. Использовать функцию type() для проверки типа. 
# Элементы списка можно не запрашивать у пользователя, а указать явно, в программе.

s =[10, True, 'word', 1.9999]
def whattype(x):
  for x in range(len(s)):
    print(type(s[x]))
  return
whattype(s)



# Для списка реализовать обмен значений соседних элементов, т.е. Значениями обмениваются элементы с индексами 0 и 1, 2 и 3 и т.д.
# При нечетном количестве элементов последний сохранить на своем месте. Для заполнения списка элементов необходимо использовать функцию input().
kolelemnts = int(input("Введите количество элементов списка "))
mylist = []
i = 0
element = 0
while i < kolelemnts:
    mylist.append(input("Введите следующее значение списка "))
    i += 1

for element in range(int(len(mylist)/2)):
        mylist[element], mylist[element + 1] = mylist [element + 1], mylist[element]
        element += 2
print(mylist)



# Пользователь вводит месяц в виде целого числа от 1 до 12. Сообщить к какому времени года относится месяц (зима, весна, лето, осень). 
# Напишите решения через list и через dict.

print("Введите месяц от 1(январь) - 12(декабрь)")
y = int(input())
dic = {
       12 :'зима',
       1 :'зима',
       2 :'зима',
       3 :'весна',
       4 :'весна',
       5 :'весна',
       6 :'лето',
       7 :'лето',
       8 :'лето',
       9 :'осень',
       10 :'осень',
       11 :'осень',}
dic[y]



# Пользователь вводит строку из нескольких слов, разделённых пробелами. Вывести каждое слово с новой строки. 
# Строки необходимо пронумеровать. Если в слово длинное, выводить только первые 10 букв в слове.
 strr = input("Введите строку: ") 
 wordd = [] 
 num = 1 
 or el in range(strr.count(' ') + 1): 
     my_word = strr.split() 
     if len(str(wordd)) <= 10: 
         print(f" {num} {wordd [el]}") 
         num += 1 
     else: 
         print(f" {num} {wordd [el] [0:10]}") 
         num += 1 
        
        
        
# Реализовать функцию my_func(), которая принимает три позиционных аргумента, и возвращает сумму наибольших двух аргументов.
    def my_func(x, y, z):
    if x >= z and y >= z:
        return x + y
    elif x > y and x < y:
        return x + y
    else:
        return y + z
    print(my_func(x=10,y=12,z=17))
    
    
    
# Программа принимает действительное положительное число x и целое отрицательное число y. Необходимо выполнить возведение числа x в степень y.
# Задание необходимо реализовать в виде функции my_func(x, y). При решении задания необходимо обойтись без встроенной функции возведения числа в степень.
# Подсказка: попробуйте решить задачу двумя способами. Первый — возведение в степень с помощью оператора **. 
# Второй — более сложная реализация без оператора **, предусматривающая использование цикла.

a = int(input())
b = int(input())
def myfunc(x,y):
  return x**y
print(myfunc(a,b)) 



# Реализовать функцию int_func(), принимающую слово из маленьких латинских букв и возвращающую его же, но с прописной первой буквой. 
# Например, print(int_func(‘text’)) -> Text.
# Продолжить работу над заданием. В программу должна попадать строка из слов, разделенных пробелом.
# Каждое слово состоит из латинских букв в нижнем регистре. Сделать вывод исходной строки, но каждое слово должно начинаться с заглавной буквы. 
# Необходимо использовать написанную ранее функцию int_func().

def int_func (*args):
    word = input("Input words ")
    print(word.title())
    return
int_func()



# Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Необходимо решить задание в одну строку.
# Подсказка: использовать функцию range() и генератор.

print(f'Числа от 20 до 240 кратные 20 или 21: {[x for x in range(20, 241) if x % 20 == 0 or x % 21 == 0]}')



# Представлен список чисел. Определить элементы списка, не имеющие повторений. 
# Сформировать итоговый массив чисел, соответствующих требованию. Элементы вывести в порядке их следования в исходном списке. 
# Для выполнения задания обязательно использовать генератор.
# Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
# Результат: [23, 1, 3, 10, 4, 11]
list1 = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
list2 = [el for el in list1 if list1.count(el) < 2]
print(list2)



